*org-super-agenda.txt*    For plugin version |0.1|    Jul 2025

org-super-agenda                                              *org-super-agenda*

This plugin organizes your orgmode agenda in a floating window using
custom groups.  It is inspired by the Emacs plugin org-super-agenda.

===============================================================================
USAGE                                                           *org-super-agenda-usage*

    :OrgSuperAgenda
        Opens the agenda window.  Use <CR> on a headline to jump to the
        source location.  Use `q` or <Esc> to close the window.
        Press the keymap defined for a TODO state to filter by it and
        `oa` to reset the filter.  Use `cs` to reschedule, `cd` to set
        a deadline, `t` to cycle TODO state and `r` to refresh the
        agenda from disk.  Press `K` to preview the current
        headline and `q` to close the preview.

===============================================================================
CONFIGURATION                                                   *org-super-agenda-setup*

Call |lua| to setup the plugin:
>
    lua << EOF
    require('org-super-agenda').setup({
      org_directories     = {},        -- recurse for *.org files
      exclude_files       = {},        -- files to ignore
      exclude_directories = {},        -- directories to ignore
      -- additional options are documented in the source
    })
    EOF
<

The `groups` option controls how headlines are grouped.  By default
items are grouped into "Today", "Important", "Overdue", "Upcoming" and
"Deadlines" sections.

You can define your own custom groups using Lua functions. For example:
>
    groups = {
      {
        name = "🔥 Urgent Work",
        matcher = function(item)
          return item:has_tag("work") and item.priority == "A"
        end,
      },
      {
        name = "🧪 Experimental",
        matcher = function(item)
          return item.headline:match("Proof of Concept") or item:has_tag("test")
        end,
      },
    }
<

Matchers have access to:
- `item.todo_state`, `item.headline`, `item.priority`
- `item:has_tag("...")`
- `item.scheduled`, `item.deadline` with methods like `:is_today()` or `:days_from_today()`

Groups are checked in order — the first match wins unless |allow_duplicates| is
set.

===============================================================================
DEFAULT OPTIONS                                                *org-super-agenda-options*

The defaults (see |lua/org-super-agenda/config.lua|) are:
>
{ 
  org_files           = {}, -- explicit file paths
  org_directories     = {}, -- recurse for *.org
  exclude_files       = {}, -- files to ignore
  exclude_directories = {}, -- dirs to ignore

  keymaps             = {
    filter_reset = 'oa',
    toggle_other = 'oo',
    filter       = 'of',  -- live filter by headline (exact)
    filter_fuzzy = 'oz',  -- live filter by headline (fuzzy)
    reschedule   = 'cs',
    set_deadline = 'cd',
    cycle_todo   = 't',
    reload       = 'r',
    refile       = 'R',  -- refile current headline via Telescope
    hide_item    = 'x',
    preview      = 'K',
    reset_hidden = 'X',
  },

  todo_states         = {
    {
      name           = 'TODO',
      keymap         = 'ot',
      color          = '#FF5555',
      strike_through = false,
      fields         = { 'filename', 'todo', 'headline', 'priority', 'date', 'tags' },
    },
    {
      name           = 'PROGRESS',
      keymap         = 'op',
      color          = '#FFAA00',
      strike_through = false,
      fields         = { 'filename', 'todo', 'headline', 'priority', 'date', 'tags' },
    },
    {
      name           = 'WAITING',
      keymap         = 'ow',
      color          = '#BD93F9',
      strike_through = false,
      fields         = { 'filename', 'todo', 'headline', 'priority', 'date', 'tags' },
    },
    {
      name           = 'DONE',
      keymap         = 'od',
      color          = '#50FA7B',
      strike_through = true,
      fields         = { 'filename', 'todo', 'headline', 'priority', 'date', 'tags' },
    },
  },

  groups              = {
    { name = "📅 Today", matcher = function(i) return i.scheduled and i.scheduled:is_today() end },
    { name = "🗓️ Tomorrow", matcher = function(i) return i.scheduled and i.scheduled:days_from_today() == 1 end, },
    {
      name = "⏰ Deadlines",
      matcher = function(i)
        return i.deadline ~= nil and i.todo_state ~= 'DONE' and
            not i:has_tag("personal")
      end,
    },
    {
      name = "⭐ Important",
      matcher = function(i)
        return i.priority == "A" and
            (i.deadline ~= nil or i.scheduled ~= nil)
      end
    },
    {
      name = '⏳ Overdue',
      matcher = function(it)
        return it.todo_state ~= 'DONE' and (
          (it.deadline and it.deadline:is_past()) or
          (it.scheduled and it.scheduled:is_past())
        )
      end
    },
    { name = "🏠 Personal", matcher = function(item) return item:has_tag("personal") end },
    { name = "💼 Work", matcher = function(item) return item:has_tag("work") end },
    {
      name = "📆 Upcoming",
      matcher = function(it)
        local days = require('org-super-agenda.config').get().upcoming_days or 10
        local deadline_ok = it.deadline and it.deadline:days_from_today() >= 0 and
            it.deadline:days_from_today() <= days
        local sched_ok = it.scheduled and it.scheduled:days_from_today() >= 0 and
            it.scheduled:days_from_today() <= days
        return deadline_ok or sched_ok
      end
    },
  },

  ---------------------------------------------------------------------------
  -- floating‑window style
  window              = {
    width        = 0.8,
    height       = 0.7,
    border       = 'rounded',
    title        = 'Super Agenda',
    title_pos    = 'center',
    margin_left  = 0, -- increasing this breaks stuff for now, so use with care
    margin_right = 0, -- increasing this is fine
  },

  ---------------------------------------------------------------------------
  -- misc
  upcoming_days       = 10,
  hide_empty_groups   = true,   -- set true to drop blank sections
  keep_order          = false,   -- keep original org‑agenda sort
  allow_duplicates    = false,   -- show items in every matching group
  group_format        = '* %s',  -- header text for groups
  other_group_name    = 'Other', -- title for catchall group
  show_other_group    = false,   -- disable to remove catchall group
  show_tags           = true,    -- display headline tags aligned right
  show_filename       = true,    -- append the source file name to headings
  heading_max_length  = 70,      -- truncate headings after this many characters
  persist_hidden      = false,   -- keep hidden items across agenda reopen
  view_mode           = 'classic', -- 'classic' | 'compact'
  classic             = {
    heading_order       = { 'filename', 'todo', 'headline', 'priority', 'date' },
    short_date_labels   = false,   -- use 'S'/'D' instead of 'SCHEDULED'/'DEADLINE'
    inline_dates        = true,    -- show SCHEDULED/DEADLINE info before TODO
  },
  compact             = {
    filename_min_width = 10,        -- pad "alpha:" column at least to this
    label_min_width    = 12,       -- pad label column ("Sched. 6x:")
  },
}
<

===============================================================================

vim:tw=78:ts=8:ft=help:norl
